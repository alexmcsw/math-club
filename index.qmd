---
title: "Math Club"
author: "Alex McSween"
format: revealjs
---

## Etc 

Hiii


```{r}
library(waffle)
library(dplyr)
library(tidyr)
library(purrr)

palette <- c(
  "#e83e8c",
  "#ffce67",
  "#56cc9d",
  "#f3969a"
)

set.seed(10)

```


```{r}
# Create timeline data

career <- data.frame(
    workplace = c("BSc", "MSc", "CMS", "StatCan"),
    start_date = c("2015-09-01", "2019-05-01", "2021-08-31", "2022-05-01"),
    end_date = c("2019-04-30", "2021-04-30", "2022-04-30", as.character(Sys.Date()))
)  |>
  mutate(
    Date = map2(
      as.Date(start_date),
      as.Date(end_date),
      seq,
      by = "1 week"
    ),
    workplace = factor(workplace, levels = c("BSc", "MSc", "CMS", "StatCan"))
  ) |>
unnest(cols = c(Date)) |>
group_by(workplace) |>
mutate(
    count = n()
) |>
select(-Date) |>
distinct()

n_milestones <- 10

y_values <- data.frame(
  yend = c(
    sample(0:10, n_milestones, replace = TRUE),
    sample(12:20, n_milestones, replace = TRUE) - 10
  ),
  y = c(
    sample(22:30, n_milestones, replace = TRUE),
    sample(-10:0, n_milestones, replace = TRUE) - 10
  )
) |> slice(sample(1:n(), n_milestones))


milestones <- data.frame(
  event = c(
    "Tried python\nfor first time",
    "Women in math club",    
    "Turned down\nPhD funding",
    "Started applying for jobs",
    "Started reaching out\nto friends on LinkedIn",
    "Learned to use Linux",
    "Developed Python skills",
    "Tried (and failed) to\nlearn to say no to work",
    "Learned R",
    "R-Ladies"
  ),
  date = as.Date(
    c(
      "2017-06-01",
      "2018-09-01",      
      "2021-09-01",
      "2021-06-01",
      "2021-12-01",
      "2021-10-01",
      "2021-12-01",
      "2022-02-01",
      "2022-07-01",
      "2022-10-01"
    )
  ),
  career = c(
    "BSc",
    "BSc",    
    "MSc",
    "MSc",    
    "CMS",
    "CMS",
    "CMS",
    "CMS",
    "StatCan",
    "StatCan"
  ),
  base_date = min(as.Date(career$start_date))
) |> 
  mutate(
    Date = map2(
      as.Date(base_date),
      as.Date(date),
      seq,
      by = "1 week"
    )
  ) |>
unnest(cols = c(Date)) |>
group_by(event) |>
mutate(
    count = n() / 10
) |>
select(-Date, base_date) |>
distinct() |>
cbind(y_values) |>
mutate(
  x_jitter = case_when(
    sample(1:100, 1) %% 2 == 1 ~ min(45, max(5, count - (yend - y))),
    .default = min(45, max(5, count + (yend - y)))
  )
)


```

## My Career

- BSc in pure mathematics from uOttawa
- MSc in mathematics and statistics from uOttawa
- IT Officer at the Canadian Mathematical Society
- Data Scientist at StatCan

```{r}
#| fig-width: 20
#| fig-align: center

ggplot(career) +
geom_waffle(
    aes(
        fill = workplace,
        values = count
    ),
    color = "white",
    size = 1
) + 
scale_fill_manual(values = palette) +
coord_equal() + 
theme_void() +
theme(
  legend.position = "bottom",
  legend.title = element_blank()
)

```

## Undergrad {.smaller}

```{r}

ggplot(career) +
geom_waffle(
    aes(
        fill = workplace,
        values = count
    ),
    color = "white",
    size = 1
) + 
scale_fill_manual(values = c(palette[1],"#c7c3c3","#c7c3c3", "#c7c3c3")) +
coord_equal() + 
xlim(0, 50) +
ylim(-20, 30) +
theme_void() +
theme(
  legend.position = "none"
) +
geom_segment(
  data = milestones |> filter(career == "BSc"),
  aes(
    yend = yend,
    y = y,
    x = x_jitter,
    xend = count
  ),
  linewidth = 1,
  colour = "#6f42c1",
  arrow = arrow(length = unit(0.03, "npc"))
) +
geom_label(
data = milestones |> filter(career == "BSc"),
  aes(
    y = y,
    x = x_jitter,
    label = event
  )
)
```


## MSc {.smaller}

```{r}

ggplot(career) +
geom_waffle(
    aes(
        fill = workplace,
        values = count
    ),
    color = "white",
    size = 1
) + 
scale_fill_manual(values = c("#c7c3c3", palette[2], "#c7c3c3", "#c7c3c3")) +
coord_equal() + 
xlim(0, 50) +
ylim(-20, 30) +
theme_void() +
theme(
  legend.position = "none"
) +
geom_segment(
  data = milestones |> filter(career == "MSc"),
  aes(
    yend = yend,
    y = y,
    x = x_jitter,
    xend = count
  ),
  linewidth = 1,
  colour = "#6f42c1",
  arrow = arrow(length = unit(0.03, "npc"))
) +
geom_label(
data = milestones |> filter(career == "MSc"),
  aes(
    y = y,
    x = x_jitter,
    label = event
  )
)

```

## CMS {.smaller}

```{r}
ggplot(career) +
geom_waffle(
    aes(
        fill = workplace,
        values = count
    ),
    color = "white",
    size = 1
) + 
scale_fill_manual(values = c("#c7c3c3", "#c7c3c3", palette[3],"#c7c3c3")) +
coord_equal() + 
theme_void() +
theme(
  legend.position = "none"
) +
geom_segment(
  data = milestones |> filter(career == "CMS"),
  aes(
    yend = yend,
    y = y,
    x = x_jitter,
    xend = count
  ),
  linewidth = 1,
  colour = "#6f42c1",
  arrow = arrow(length = unit(0.03, "npc"))
) +
xlim(0, 50) +
ylim(-20, 30) +
geom_label(
data = milestones |> filter(career == "CMS"),
  aes(
    y = y,
    x = x_jitter,
    label = event
  )
)

```

## StatCan {.smaller}

```{r}

ggplot(career) +
geom_waffle(
    aes(
        fill = workplace,
        values = count
    ),
    color = "white",
    size = 1
) + 
scale_fill_manual(values = c("#c7c3c3", "#c7c3c3", "#c7c3c3", palette[4])) +
coord_equal() + 
theme_void() +
theme(
  legend.position = "none"
) +
geom_segment(
  data = milestones |> filter(career == "StatCan"),
  aes(
    yend = yend,
    y = y,
    x = x_jitter,
    xend = count
  ),
  linewidth = 1,
  colour = "#6f42c1",
  arrow = arrow(length = unit(0.03, "npc"))
) + 
xlim(0, 50) +
ylim(-20, 30) +
geom_label(
data = milestones |> filter(career == "StatCan"),
  aes(
    y = y,
    x = x_jitter,
    label = event
  )
)

```

## Population Projections

- small area projections
- mortality, life expectancy
- National population projections
  - cohort component projection
  - preparation of components
    - fertility,
    - mortality


